"""
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

https://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

"""This module implements detection of the topk vs others oversight
in the top-k intent.

Topk_vs_others is the oversight which arises when  the entries that are
not in the results of top-k, have a huge impact.
Here we use the ratio of the sum of top-k  metrics to the sum of other
metrics to decide when to return a debissing suggestion.
"""
import sys
sys.path.append(".")

from util import constants, enums

def topk_vs_others(result_table, k, metric):
    """This function gives suggestions if 'top-k vs others' oversight is
    detected in the results generated by the top-k.

    It compares the top-k to rest of the entries which pass the filtering
    & date range but are not in the top-k. The ratio if the summation
    of the top-k to the summation of the rest is used to decide when to
    give a suggestion.
    When the value of this parameter excedes a preset value. the debiasing
    suggestion is returned.

    The cut-off is fixed in the util/constants module

    Args:
        topk_results: Type-pandas dataframe
            contain the results without cropping rows not in top-k.
        k: integer
            It is the number of entries to be taken in the top-k results.
        metric: str
            It is the column name of the metric column

    Returns:
        A tuple that contains the suggestions and the change_list(list of changes
        suggested in the query)
    """

    num_rows = result_table.shape[0]

    if k == num_rows or k == -1:
        return

    # sum of top k rows
    topk_sum = result_table[:k][metric].sum()

    # sum of all rows
    total_sum = result_table[metric].sum()

    # sum of rows not in top-k
    others_sum = total_sum - topk_sum

    if others_sum == 0:
        return

    ratio = topk_sum / others_sum

    if ratio < constants.TOPK_VS_OTHERS_THRESHOLD:
        change_list = {'topKLimit':result_table.shape[0]}
        suggestion = {}
        suggestion['oversight'] = enums.Oversights.TOPK_VS_OTHERS
        suggestion['change_list'] = change_list
        if ratio > 0:
            suggestion['suggestion'] = 'The rows NOT in the top-k have a much larger sum over ' \
            + metric  + ' than the rows in top-k'
        else:
            suggestion['suggestion'] = 'The sum of ' + metric + ' in top-k rows is ' \
            + _sign(topk_sum) + ' whereas sum of rows not in top-k is ' + _sign(others_sum) 

        confidence_score = ratio
        suggestion['confidence_score'] = confidence_score
        return suggestion
    else:
        return

def _sign(num):
    """
    Returns the sign of the input
    Args :
        num - float
    Returns :
        String 'positive' or 'negative'
    """
    if num < 0:
        return 'positive'
    else:
        return 'negative'
